-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS test.cupcake_bottoms
(
    bottom_id bigserial NOT NULL,
    bottom_flavour character varying COLLATE pg_catalog."default" NOT NULL,
    bottom_price integer NOT NULL,
    CONSTRAINT cupcake_bottoms_pkey PRIMARY KEY (bottom_id)
);

CREATE TABLE IF NOT EXISTS test.cupcake_customers
(
    customer_id bigserial NOT NULL,
    customer_name character varying COLLATE pg_catalog."default" NOT NULL,
    customer_password character varying COLLATE pg_catalog."default" NOT NULL,
    customer_email character varying COLLATE pg_catalog."default" NOT NULL,
    customer_wallet integer NOT NULL,
    CONSTRAINT cupcake_customers_pkey PRIMARY KEY (customer_id),
    CONSTRAINT unique_customer_email UNIQUE (customer_email)
);

CREATE TABLE IF NOT EXISTS test.cupcake_toppings
(
    topping_id bigserial NOT NULL,
    topping_flavour character varying COLLATE pg_catalog."default" NOT NULL,
    topping_price integer NOT NULL,
    img_name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT cupcake_toppings_pkey PRIMARY KEY (topping_id)
);

CREATE TABLE IF NOT EXISTS test.customer_order_history
(
    order_history_id bigserial NOT NULL,
    order_id bigint NOT NULL,
    bottom_id bigint NOT NULL,
    topping_id integer NOT NULL,
    quantity integer NOT NULL,
    total_price real NOT NULL,
    CONSTRAINT customer_order_history_pkey PRIMARY KEY (order_history_id)
);

CREATE TABLE IF NOT EXISTS test.customer_orders
(
    order_id bigserial NOT NULL,
    customer_id bigint NOT NULL,
    order_date date DEFAULT CURRENT_DATE,
    order_number uuid DEFAULT gen_random_uuid(),
    status_id integer NOT NULL,
    CONSTRAINT customer_orders_pkey PRIMARY KEY (order_id),
    CONSTRAINT customer_orders_order_number_key UNIQUE (order_number)
);

CREATE TABLE IF NOT EXISTS test.order_status
(
    status_id serial NOT NULL,
    status_name character varying(20) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT order_status_pkey PRIMARY KEY (status_id),
    CONSTRAINT order_status_status_name_key UNIQUE (status_name)
);

ALTER TABLE IF EXISTS test.customer_order_history
    ADD CONSTRAINT fk_bottom_id FOREIGN KEY (bottom_id)
    REFERENCES test.cupcake_bottoms (bottom_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS test.customer_order_history
    ADD CONSTRAINT fk_order FOREIGN KEY (order_id)
    REFERENCES test.customer_orders (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS test.customer_order_history
    ADD CONSTRAINT fk_topping FOREIGN KEY (topping_id)
    REFERENCES test.cupcake_toppings (topping_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS test.customer_orders
    ADD CONSTRAINT fk_customer FOREIGN KEY (customer_id)
    REFERENCES test.cupcake_customers (customer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS test.customer_orders
    ADD CONSTRAINT fk_order_status FOREIGN KEY (status_id)
    REFERENCES test.order_status (status_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

END;